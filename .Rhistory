rm(list=ls())
library(EBImage)
im <-  readImage("NCState.png")
class(im)
?diff
x=matrix(1:9,3,3)
x
diff(x)
x%*%c(0.5,0,0.5)
cbind(0,x)
cbind(x,0)
cbind(0,x)+cbind(x,0)
x
cbind(0,0,x)+cbind(x,0,0)
lr=cbind(0,0,x)+cbind(x,0,0)
lr=lr[,2:3]
lr
lr=cbind(0,0,x)+cbind(x,0,0)
lr=lr[,2:4]
lr
ud=rbind(0,0,x)+rbind(x,0,0)
ud
ud=ud[2:4,]
ud
lr+ud
n=10
m=10
rbind(2,cbind(3,matrix(rep(4,(m-2)*(n-2)),m-2,n-2),3),2)
denominator <- rbind(3,cbind(3,matrix(rep(4,(m-2)*(n-2)),m-2,n-2),3),3)
rbind(3,cbind(3,matrix(rep(4,(m-2)*(n-2)),m-2,n-2),3),3)
denominator[c(1,m),c(1,n)] <- 2
denominator <- matrix(rep(4,m*n),m,n)
denominator[c(1,m),] <- 3; denominator[,c(1,n)] <- 3;
denominator[c(1,m),c(1,n)] <- 2
denominator
X=im[,,1]
plot(X)
display(X)
m <- nrow(X)
n <- ncol(X)
LeftRight <- cbind(0,0,X) + cbind(X,0,0)
LeftRight <- LeftRight[,2:n-1]
UpDown <- rbind(0,0,X) + rbind(X,0,0)
UpDown <- UpDown[2:m-1,]
denominator <- matrix(rep(4,m*n),m,n)
denominator[c(1,m),] <- 3; denominator[,c(1,n)] <- 3;
denominator[c(1,m),c(1,n)] <- 2
PixelAvg <- (LeftRight + UpDown)/denominator
LeftRight <- LeftRight[,2:n+1]
m <- nrow(X)
n <- ncol(X)
LeftRight <- cbind(0,0,X) + cbind(X,0,0)
LeftRight <- LeftRight[,2:n+1]
UpDown <- rbind(0,0,X) + rbind(X,0,0)
UpDown <- UpDown[2:m+1,]
denominator <- matrix(rep(4,m*n),m,n)
denominator[c(1,m),] <- 3; denominator[,c(1,n)] <- 3;
denominator[c(1,m),c(1,n)] <- 2
PixelAvg <- (LeftRight + UpDown)/denominator
LeftRight <- cbind(0,0,X) + cbind(X,0,0)
LeftRight <- LeftRight[,2:n+1]
LeftRight <- cbind(0,0,X) + cbind(X,0,0)
LeftRight <- LeftRight[,2:(n+1)]
m <- nrow(X)
n <- ncol(X)
LeftRight <- cbind(0,0,X) + cbind(X,0,0)
LeftRight <- LeftRight[,2:(n+1)]
UpDown <- rbind(0,0,X) + rbind(X,0,0)
UpDown <- UpDown[2:(m+1),]
denominator <- matrix(rep(4,m*n),m,n)
denominator[c(1,m),] <- 3; denominator[,c(1,n)] <- 3;
denominator[c(1,m),c(1,n)] <- 2
PixelAvg <- (LeftRight + UpDown)/denominator
X - PixelAvg
display(X-PixelAvg)
Diff <- X - PixelAvg
max(Diff)
GenerateNoise <- function(X, p, type=0){
# X is an input m*n matrix
# p is the corruption probability of every pixel
# type is the type of noise, 0=white and 1=color
m <- nrow(X)
n <- ncol(X)
NoiseLocation <- which(rbinom(m*n, 1, p)==1)
NoiseNumber <- length(NoiseLocation)
if (colorMode(X) == 0){
X[NoiseLocation] <- runif(n=NoiseNumber, max=type)
} else {
for (d in 1:dim(X)[3]){
X[NoiseLocation+(d-1)*m*n] <- runif(n=NoiseNumber, max=type)
}
}
return(X)
}
imBlackNoise <-  GenerateNoise(im, p=0.2)
X=imBlackNoise[,,1]
display(X)
m <- nrow(X)
n <- ncol(X)
LeftRight <- cbind(0,0,X) + cbind(X,0,0)
LeftRight <- LeftRight[,2:(n+1)]
UpDown <- rbind(0,0,X) + rbind(X,0,0)
UpDown <- UpDown[2:(m+1),]
denominator <- matrix(rep(4,m*n),m,n)
denominator[c(1,m),] <- 3; denominator[,c(1,n)] <- 3;
denominator[c(1,m),c(1,n)] <- 2
PixelAvg <- (LeftRight + UpDown)/denominator
Diff <- X - PixelAvg
display(Diff)
min(Diff)
Diff <- (X - PixelAvg)^2
min(Diff)
max(Diff)
display(Diff)
imColorNoise <-  GenerateNoise(im, p=0.4, type=1)
X=imColorNoise[,,1]
display(X)
DetectNoise <- function(X){
# X is an input m*n matrix
m <- nrow(X)
n <- ncol(X)
LeftRight <- cbind(0,0,X) + cbind(X,0,0)
LeftRight <- LeftRight[,2:(n+1)]
UpDown <- rbind(0,0,X) + rbind(X,0,0)
UpDown <- UpDown[2:(m+1),]
denominator <- matrix(rep(4,m*n),m,n)
denominator[c(1,m),] <- 3; denominator[,c(1,n)] <- 3;
denominator[c(1,m),c(1,n)] <- 2
PixelAvg <- (LeftRight + UpDown)/denominator
Diff <- (X - PixelAvg)^2
}
display(DetectNoise(X))
m <- nrow(X)
n <- ncol(X)
LeftRight <- cbind(0,0,X) + cbind(X,0,0)
LeftRight <- LeftRight[,2:(n+1)]
UpDown <- rbind(0,0,X) + rbind(X,0,0)
UpDown <- UpDown[2:(m+1),]
denominator <- matrix(rep(4,m*n),m,n)
denominator[c(1,m),] <- 3; denominator[,c(1,n)] <- 3;
denominator[c(1,m),c(1,n)] <- 2
PixelAvg <- (LeftRight + UpDown)/denominator
Diff <- (X - PixelAvg)^2
sum(Diff==0)
sum(Diff==0)/402/480
rm(list=ls())
library(EBImage)
im <-  readImage("NCState.png")
imColorNoise <-  GenerateNoise(im, p=0.4, type=1)
display(imColorNoise)
GenerateNoise <- function(X, p, type=0){
# X is an input m*n matrix
# p is the corruption probability of every pixel
# type is the type of noise, 0=white and 1=color
m <- nrow(X)
n <- ncol(X)
NoiseLocation <- which(rbinom(m*n, 1, p)==1)
NoiseNumber <- length(NoiseLocation)
if (colorMode(X) == 0){
X[NoiseLocation] <- runif(n=NoiseNumber, max=type)
} else {
for (d in 1:dim(X)[3]){
X[NoiseLocation+(d-1)*m*n] <- runif(n=NoiseNumber, max=type)
}
}
return(X)
}
imColorNoise <-  GenerateNoise(im, p=0.4, type=1)
display(imColorNoise)
DetectNoise <- function(X){
# X is an input m*n matrix
m <- nrow(X)
n <- ncol(X)
LeftRight <- cbind(0,0,X) + cbind(X,0,0)
LeftRight <- LeftRight[,2:(n+1)]
UpDown <- rbind(0,0,X) + rbind(X,0,0)
UpDown <- UpDown[2:(m+1),]
denominator <- matrix(rep(4,m*n),m,n)
denominator[c(1,m),] <- 3; denominator[,c(1,n)] <- 3;
denominator[c(1,m),c(1,n)] <- 2
PixelAvg <- (LeftRight + UpDown)/denominator
Diff <- (X - PixelAvg)^2
}
ReduceRank <- function(X, rank, p=0){
# X is an input m*n matrix
# rank is the desired rank of the output matrix
# p is the corruption probability of every pixel
#m <- nrow(X)
n <- ncol(X)
# o is the probability of observe a uncorrupted pixel
o <- 1-p
# Calculate the covariance matrix
XtX = X %*% t(X)
C <- 1/n * (1/o^2 * XtX + (1/o-1/o^2) * diag(diag(XtX)))
# Get eigenvectors correspond to the biggest #=rank eigenvalues
V <- eigen(C)$vector[,1:rank]
# Project X to the column space of V
P <- V %*% t(V) %*% X
return(P)
}
ReduceRankUnif <- function(X, rank, p=0){
# X is an input m*n matrix
# rank is the desired rank of the output matrix
# p is the corruption probability of every pixel
#m <- nrow(X)
n <- ncol(X)
# o is the probability of observe a uncorrupted pixel
o <- 1-p
# Calculate the covariance matrix
Cdiag = (diag(X %*% t(X)) - n*p/3)/o
Coffdiag = 1/o^2 * (X-p/2) %*% t(X-p/2)
C <- 1/n * (Coffdiag - diag(diag(Coffdiag)) + diag(Cdiag))
# Get eigenvectors correspond to the biggest #=rank eigenvalues
V <- eigen(C)$vector[,1:rank]
# Project X to the column space of V
P <- V %*% t(V) %*% X
return(P)
}
Denoise <- function(X, rank, p=0){
# X is an input m*n*d array, preferably of class "Image"
# rank is the desired rank of the output array
# p is the corruption probability of every pixel
if (colorMode(X) == 0){
return(ReduceRank(X, rank, p))
} else {
for (d in 1:dim(X)[3]){
X[,,d] <- ReduceRank(X[,,d], rank, p)
}
return(X)
}
}
DenoiseUnif <- function(X, rank, p=0){
# X is an input m*n*d array, preferably of class "Image"
# rank is the desired rank of the output array
# p is the corruption probability of every pixel
if (colorMode(X) == 0){
return(ReduceRankUnif(X, rank, p))
} else {
for (d in 1:dim(X)[3]){
X[,,d] <- ReduceRankUnif(X[,,d], rank, p)
}
return(X)
}
}
display(DenoiseUnif(imColorNoise,20, p=0.4))
t=matrix(1:9,3,3)
t
rowMeans(t)
t-rowMeans(t)
t=t-rowMeans(t)
t
t+c(4,5,6)
ReduceRank <- function(X, rank, p=0){
# X is an input m*n matrix
# rank is the desired rank of the output matrix
# p is the corruption probability of every pixel
#m <- nrow(X)
n <- ncol(X)
# o is the probability of observe a uncorrupted pixel
o <- 1-p
center <- rowMeans(X)
X <- X-center
# Calculate the covariance matrix
XtX = X %*% t(X)
C <- 1/n * (1/o^2 * XtX + (1/o-1/o^2) * diag(diag(XtX)))
# Get eigenvectors correspond to the biggest #=rank eigenvalues
V <- eigen(C)$vector[,1:rank]
# Project X to the column space of V
P <- V %*% t(V) %*% X + center
return(P)
}
ReduceRankUnif <- function(X, rank, p=0){
# X is an input m*n matrix
# rank is the desired rank of the output matrix
# p is the corruption probability of every pixel
#m <- nrow(X)
n <- ncol(X)
# o is the probability of observe a uncorrupted pixel
o <- 1-p
center <- rowMeans(X)
X <- X-center
# Calculate the covariance matrix
Cdiag = (diag(X %*% t(X)) - n*p/3)/o
Coffdiag = 1/o^2 * (X-p/2) %*% t(X-p/2)
C <- 1/n * (Coffdiag - diag(diag(Coffdiag)) + diag(Cdiag))
# Get eigenvectors correspond to the biggest #=rank eigenvalues
V <- eigen(C)$vector[,1:rank]
# Project X to the column space of V
P <- V %*% t(V) %*% X + center
return(P)
}
display(DenoiseUnif(imColorNoise,20, p=0.4))
